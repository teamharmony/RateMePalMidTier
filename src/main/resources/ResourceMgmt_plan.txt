create database rateMePal;
use rateMePal;

drop table users;
create table users (
	username varchar(12) not null,
	password varchar(32) not null,
	resetpwd smallint default 0,
	primary key(username)
	) engine=InnoDB;

drop table authorities;
create table authorities (
	username varchar(12) not null,
	authority varchar(10) not null,
	foreign key(username) references users(username)
	) engine=InnoDB;

drop table user_details;
create table user_details(
	name varchar(30) not null,
	username varchar(12) not null,
	visible smallint default 1,
	email varchar(60) not null,
	contact varchar(15) not null,
	designation varchar(30) not null,
	description varchar(120) not null,
	profilePic longblob,
	primary key(email),
	foreign key(username) references users(username)
	) engine=InnoDB;



drop table deviceMapping;
create table deviceMapping (
	username varchar(12) not null,
	deviceId varchar(250) not null,
	primary key(username, deviceId),
	foreign key(username) references users(username)	
)engine=InnoDB;




drop table friends;
create table friends (
	username varchar(12) not null,
	friendname varchar(12) not null,
	status smallint,
	primary key(username, friendname),
	unique key(friendname, username),
	foreign key(username) references users(username),
	foreign key(friendname) references users(username)
)engine=InnoDB;





drop procedure addUserDeviceMapping;		
delimiter //
create procedure addUserDeviceMapping(
								IN username varchar(12), 
								IN deviceId varchar(250)
							)
	begin

		INSERT IGNORE INTO deviceMapping (username, deviceId)
		VALUES (username, deviceId);	
		
	end//
delimiter ;

drop procedure removeUserDeviceMapping;		
delimiter //
create procedure removeUserDeviceMapping(
								IN username varchar(12), 
								IN deviceId varchar(250)
							)
	begin

		DELETE FROM deviceMapping as dm
		WHERE dm.username = username AND dm.deviceId = deviceId;	
		
	end//
delimiter ;


drop procedure getUserDeviceMapping;		
delimiter //
create procedure getUserDeviceMapping(
								IN username varchar(12) 
								)
	begin

		SELECT deviceId FROM deviceMapping 
		WHERE dm.username = username;	
		
	end//
delimiter ;


drop procedure addFriend;		
delimiter //
create procedure addFriend(
								IN _user1 varchar(12), 
								IN _user2 varchar(12)
							)
	begin

		delete from friends
		where username = _user1 AND friendname = _user2;

		delete from friends
		where username = _user2 AND friendname = _user1;

		insert into friends
		values (_user1, _user2, 1);


		insert into friends
		values (_user2, _user1, 4);

	end//
delimiter ;

drop procedure updateFriendStatus;		
delimiter //
create procedure updateFriendStatus(
								IN _user1 varchar(12), 
								IN _user2 varchar(12),
								IN _status smallint
							)
	begin

		if _status = 2 then
			update friends 
			set status = 2
			where ((username = _user1 AND friendname = _user2 )OR (username =  _user2 AND friendname = _user1));
		elseif _status = 3 then
			update friends 
			set status = 3
			where ((username = _user1 AND friendname = _user2 )OR (username =  _user2 AND friendname = _user1));
		end if;	

	end// 
delimiter ;




drop procedure searchFriends;		
delimiter //
create procedure searchFriends(IN _user1 varchar(12), IN _searchKey varchar(30))
	begin
	    SELECT u.name as displayName, f.friendname as username
	    FROM friends f 
	    INNER JOIN user_details u 
	    ON ( u.username = f.friendname  AND u.name LIKE  concat('%',  lower(_searchKey) , '%'))
	    WHERE f.username = _user1 AND f.status = 2;
	end//
delimiter ;




drop procedure searchNonFriends;		
delimiter //
create procedure searchNonFriends(IN _user1 varchar(12), IN _searchKey varchar(30))
	begin
	
		DROP TEMPORARY TABLE IF EXISTS tblResults1;
	  	CREATE TEMPORARY TABLE IF NOT EXISTS tblResults1  (
			username varchar(12) not null,
			displayName varchar(30) not null,
			status smallint default 0
	  	);

		INSERT into tblResults1
		SELECT  u.username , ud.name as displayName, f.status
		from users u
		INNER JOIN user_details ud
		ON(u.username = ud.username)
		LEFT JOIN friends f
		ON(u.username = f.friendname AND f.username = _user1)
		WHERE u.username != _user1
		GROUP BY u.username;
					
		SELECT DISTINCT * from tblResults1
		WHERE displayName LIKE  concat('%',  lower(_searchKey) , '%') AND username NOT IN (
			    SELECT f.friendname
			    FROM friends f 
			    INNER JOIN user_details u 
			    ON ( u.username = f.friendname)
			    WHERE f.username = _user1 AND f.status = 2);

end//
delimiter ;




drop procedure showFriends;		
delimiter //
create procedure showFriends(IN _user1 varchar(12))
	begin
	    SELECT u.name as displayName, f.friendname as username
	    FROM friends f 
	    INNER JOIN user_details u 
	    ON ( u.username = f.friendname )
	    WHERE f.username = _user1 AND f.status = 2;
	end//
delimiter ;


drop procedure showInvitedFriends;		
delimiter //
create procedure showInvitedFriends(IN _user1 varchar(12))
	begin
	    SELECT u.name as displayName, f.friendname as username
	    FROM friends f 
	    INNER JOIN user_details u 
	    ON ( u.username = f.friendname )
	    WHERE f.username = _user1 AND f.status = 1;
	end//
delimiter ;


drop procedure showPendingFriends;		
delimiter //
create procedure showPendingFriends(IN _user1 varchar(12))
	begin
	    SELECT u.name as displayName, f.friendname as username
	    FROM friends f 
	    INNER JOIN user_details u 
	    ON ( u.username = f.friendname )
	    WHERE f.username = _user1 AND f.status = 4;
	end//
delimiter ;



drop procedure showNonFriends;		
delimiter //
create procedure showNonFriends(IN _user1 varchar(12))
	begin
		DROP TEMPORARY TABLE IF EXISTS tblResults;
	  	CREATE TEMPORARY TABLE IF NOT EXISTS tblResults  (
			username varchar(12) not null,
			displayName varchar(30) not null,
			status smallint default 0
	  	);

		INSERT into tblResults
		SELECT  u.username , ud.name as displayName, f.status
		from users u
		INNER JOIN user_details ud
		ON(u.username = ud.username)
		LEFT JOIN friends f
		ON(u.username = f.friendname AND f.username = _user1)
		WHERE u.username != _user1
		GROUP BY u.username;
					
		SELECT DISTINCT * from tblResults
		WHERE username NOT IN (
			    SELECT f.friendname
			    FROM friends f 
			    INNER JOIN user_details u 
			    ON ( u.username = f.friendname )
			    WHERE f.username = _user1 AND f.status = 2);

	end//
delimiter ;


drop table paramType;
create table paramType (
	id smallint not null,
	text varchar(50),
	primary key(id)
)engine=InnoDB;

insert into paramType values (1, 'Personal'), (2, 'Professional');


drop table parameters;
create table parameters (
	id smallint not null auto_increment,
	type smallint,
	creator varchar(12),
	name varchar(100),
	text varchar(1000),
	primary key(id),
	foreign key(creator) references users(username),
	foreign key(type) references paramType(id)
)engine=InnoDB;


drop procedure addParameter;		
delimiter //
create procedure addParameter(IN _type smallint,
														IN _name varchar(100),					
														IN _creator varchar(12),
														IN _text varchar(1000))
	begin
		insert into parameters (type, creator, name, text)
		values (_type, _creator, _name, _text); 
	end//
delimiter ;



drop procedure removeParameter;		
delimiter //
create procedure removeParameter(IN _id smallint, IN _creator varchar(12))
	begin
		delete from parameters where
		id = _id and creator = _creator; 
	end//
delimiter ;


drop procedure showParameters;		
delimiter //
create procedure showParameters(IN _creator varchar(12))
	begin
		select * from parameters
		where creator = _creator; 
	end//
delimiter ;


drop procedure isUserNameOccupied;		
delimiter //
create procedure isUserNameOccupied(IN _username varchar(12), OUT _occupied smallint )
	begin
		select count(*) into _occupied from users where username = _username; 
	end//
delimiter ;


drop procedure isEmailOccupied;		
delimiter //
create procedure isEmailOccupied(IN _email varchar(60), OUT _occupied smallint )
	begin
		select count(*) into _occupied from user_details where email = _email; 
	end//
delimiter ;

drop procedure registerUser;		
delimiter //
create procedure registerUser(IN _username varchar(12), 
						IN _pwd varchar(32),
						IN _authority varchar(10),
						IN _name varchar(30),
						IN _visible smallint,
						IN _email varchar(60), 
						IN _contact varchar(15),
						IN _profilePic longblob,
						IN _designation varchar(30),
						IN _description varchar(120)					
						)
begin 

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		rollback;
		resignal;
	END;
	start transaction;
		insert into users(username, password) values(_username, md5(_pwd));
		insert into authorities (username, authority) values(_username, _authority);
		insert into user_details (username, name, email, contact, visible, designation, description) 
			values(_username, _name, _email, _contact, _visible, _designation, _description );
			
		if _profilePic is not null then
			update user_details
				set profilePic = _profilePic where username = _username;
		end if; 
	commit;


end//
delimiter ;



drop procedure updateUser;
delimiter //
create procedure updateUser(IN _username varchar(12), 
						IN _name varchar(30),
						IN _email varchar(60),
						IN _contact varchar(15),
						IN _profilePic longblob,
						IN _designation varchar(30),
						IN _description varchar(120),
						IN _visible smallint)
begin 
			
		if _name is not null then
			update user_details
				set name = _name where username = _username;
		end if;
		
		if _email is not null then
			update user_details
				set email = _email where username = _username;
		end if;
		
		if _visible is not null then
			update user_details
				set visible = _visible where username = _username;
		end if;
			
		if _contact is not null then
			update user_details
				set contact = _contact where username = _username;
		end if;
			
		if _profilePic is not null then
			update user_details
				set profilePic = _profilePic where username = _username;
		end if;
		
		if _designation is not null then
			update user_details
				set designation = _designation where username = _username;
		end if;
		
		if _description is not null then
			update user_details
				set description = _description where username = _username;
		end if;
					
end//
delimiter ;

drop procedure updatePassword;
delimiter //
create procedure updatePassword(IN _username varchar(12), 
						IN _pwd varchar(32), IN _resetpwd smallint)
begin 
	update users
		set password = md5(_pwd), resetpwd = _resetpwd
			where username = _username;
end//
delimiter ;


drop procedure getUserDetails;
delimiter //
create procedure getUserDetails(IN _username varchar(12),
						OUT _name varchar(30),
						OUT _email varchar(60),
						OUT _contact varchar(15),
						OUT _visible smallint,
						OUT _designation varchar(30),
						OUT _description varchar(120)
)
begin 
	select name,  email, contact, visible, designation, description  into  
		_name, _email, _contact, _visible, _designation, _description
			from user_details
			where username = _username;
end//
delimiter ;



drop procedure getUserProfilePic;
delimiter //
create procedure getUserProfilePic(IN _username varchar(12))
begin 
	select profilePic
		from user_details
			where username = _username;
end//
delimiter ;

drop procedure isPwdReset;
delimiter //
create procedure isPwdReset(IN _username varchar(12), OUT _resetpwd smallint)
begin 
		select resetpwd into _resetpwd from users
			where username = _username;
end//
delimiter ;






drop table dataRequests;
Create table dataRequests(
	requestId int not null auto_increment,
	requestName varchar(250),
	friendCreated smallint,
	creationTime bigint,
	primary key(requestId)
);

drop table dataRequestsDetails;
Create table dataRequestsDetails(
	detailId int not null auto_increment,
	requestId int not null,
	paramId smallint not null,
	friend varchar(12),
	primary key(detailId, paramId),
	foreign key(requestId) references dataRequests(requestId),
	foreign key(friend) references users(username),
	foreign key(paramId) references parameters(id)
);

drop table rating;
create table rating(
	ratingId int not null auto_increment,
	detailId int not null,
	paramId smallint not null,
	rating smallint,
	primary key(ratingId),
	foreign key(detailId, paramId) references dataRequestsDetails(detailId, paramId),
);


drop procedure addDataRequest;
delimiter //
CREATE PROCEDURE addDataRequest
     (
	IN requestName varchar(250),
	IN friendCreated smallint,
	OUT requestid int
     )
BEGIN 

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		rollback;
		resignal;
	END;

	
	start transaction;
		INSERT INTO dataRequests(requestName, friendCreated, creationTime)
		VALUES(requestName, friendCreated, unix_timestamp());
		
		SELECT LAST_INSERT_ID() into requestid;
	commit;
end//
delimiter;



drop procedure addDataRequestDetails;
delimiter //
CREATE PROCEDURE addDataRequestDetails
     (
        IN  requestId int,
        IN  paramList varchar(5000),
        IN  friendList varchar(5000)
     )
BEGIN 

	DECLARE friendsSubStrLen INT DEFAULT 0;
	DECLARE paramSubStrLen INT DEFAULT 0;

	DECLARE currentFriend Varchar(12);
	DECLARE currentParamId int;
	
	DECLARE workedParamList varchar(5000);


	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		rollback;
		resignal;
	END;

	start transaction;

	IF paramList IS NULL THEN
    		SET paramList = '';
  	END IF;


	IF friendList IS NULL THEN
    		SET friendList = '';
  	END IF;


	friendsLoop:
  		LOOP
		set currentFriend = SUBSTRING_INDEX(friendList, ',', 1);
		set workedParamList = paramList;
		
		paramLoop:
			Loop
				set currentParamId = cast(SUBSTRING_INDEX(workedParamList, ',', 1) as unsigned);
				
				insert into dataRequestsDetails(requestId, paramId, friend)
				values(requestId, currentParamId, currentFriend);
				
			    	SET paramSubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(workedParamList, ',', 1)) + 2;
    				SET workedParamList = MID(workedParamList, paramSubStrLen);

				IF workedParamList = '' THEN
					LEAVE paramLoop;
				 END IF;

			End Loop paramLoop;

			
    		SET friendsSubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(friendList, ',', 1)) + 2;
    		SET friendList = MID(friendList, friendsSubStrLen);

    		IF friendList = '' THEN
      			LEAVE friendsLoop;
   		 END IF;
  
  	END LOOP friendsLoop;

	commit;
end//
delimiter;




drop procedure getRatingRequestsByUser;
delimiter //
CREATE PROCEDURE getRatingRequestsByUser
     (
        IN  user varchar(12)
     )
BEGIN 

select dr.requestId, dr.requestName, dr.friendCreated,
		drd.detailId, drd.paramId, p.name as paramName, p.text as paramText, u.name as displayName, u.designation as designation
from dataRequests as dr, dataRequestsDetails as drd, user_details as u, parameters as p
where dr.requestId  = drd.requestId and
p.id = drd.paramId and
u.username = drd.friend and
p.creator = user
order by dr.creationTime desc;


end//
delimiter;


drop procedure getRatingRequestsToUser;
delimiter //
CREATE PROCEDURE getRatingRequestsToUser
     (
        IN  user varchar(12)
     )
BEGIN 

select dr.requestId, dr.requestName, dr.friendCreated,
		drd.detailId, drd.paramId, p.name as paramName, p.text as paramText, u.name as displayName, u.designation as designation
from dataRequests as dr, dataRequestsDetails as drd, user_details as u, parameters as p
where dr.requestId  = drd.requestId and
p.id = drd.paramId and
u.username = p.creator and
drd.friend = user
order by dr.creationTime desc;

end//
delimiter;



drop procedure getRatingAverage;
delimiter //
CREATE PROCEDURE getRatingAverage
     (
        IN  paramList VARCHAR(5000)
     )
BEGIN 
		set @sql = concat('select paramId, avg(rating) as rating from rating where paramId IN (', paramList , ') group by paramId');
		
		PREPARE stmt1 FROM @sql;

		EXECUTE stmt1;
		
		DEALLOCATE PREPARE stmt1;	
		
	end//
delimiter;

drop procedure getIndividualRating;
delimiter //
CREATE PROCEDURE getIndividualRating
     (
		IN  detailList varchar(5000)
     )
BEGIN 
		set @sql = concat('select paramId, detailId, rating from rating where detailId IN (', detailList , ')');
		
		PREPARE stmt1 FROM @sql;

		EXECUTE stmt1;
		
		DEALLOCATE PREPARE stmt1;	
end//
delimiter;


drop procedure rateAParam;
delimiter //
CREATE PROCEDURE rateAParam
(
        IN  _detailId int, 
        IN  _paramId int, 
        IN  rating smallint 
 )
BEGIN 

		delete from rating where paramId = _paramId and detailId=_detailId;

   		INSERT INTO rating(detailId, paramId, rating)
	    	VALUES(_detailId, _paramId, rating);
end//
delimiter;
